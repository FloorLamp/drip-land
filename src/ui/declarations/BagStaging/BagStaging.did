type TransferNotification = 
 record {
   amount: nat64;
   from: principal;
   memo: opt vec nat8;
   to: principal;
   token_id: nat64;
 };
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken) ->
                                (StreamingCallbackHttpResponse) query;
                              token: StreamingCallbackToken;
                            };};
type StreamingCallbackToken = 
 record {
   content_encoding: text;
   index: nat;
   key: text;
   sha256: opt blob;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken;
 };
type Result_2 = 
 variant {
   err: text;
   ok: nat32;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec nat32;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type Property = 
 record {
   name: text;
   value: variant {
            Bool: bool;
            Int: int64;
            Text: text;
          };
 };
type PlayerStatus = record {};
type PlayerData = 
 record {
   equipped:
    variant {
      bundle: opt nat32;
      items:
       record {
         accessory: opt nat32;
         chest: opt nat32;
         foot: opt nat32;
         hand: opt nat32;
         head: opt nat32;
         pants: opt nat32;
         underwear: opt nat32;
         waist: opt nat32;
       };
    };
   inventory: vec nat32;
   name: text;
   status: vec PlayerStatus;
 };
type ItemState = variant {equipped;};
type Item = 
 record {
   childOf: opt nat32;
   children: vec nat32;
   dripProperties: opt record {
                         id: nat32;
                         isBurned: bool;
                       };
   id: nat32;
   name: text;
   owner: principal;
   properties: vec Property;
   state: opt ItemState;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type BundleRequest = 
 record {
   ids: vec nat32;
   name: text;
 };
type Bag = 
 service {
   bundle: (BundleRequest) -> (Result_2);
   dataOf: (vec nat32) -> (vec opt Item) query;
   dripsBurnedCount: () -> (nat) query;
   equip: (vec nat32) -> (Result);
   http_request: (HttpRequest) -> (HttpResponse) query;
   name: () -> (text) query;
   ownerOf: (vec nat32) -> (vec opt principal) query;
   playerData: (opt principal) -> (opt PlayerData) query;
   reclaim: (opt principal) -> (vec nat32);
   symbol: () -> (text) query;
   totalSupply: () -> (nat) query;
   transferTo: (principal, nat32, opt bool) -> (Result);
   transfer_notification: (TransferNotification) -> (Result);
   unbundle: (nat32) -> (Result_1);
   unequip: (vec nat32) -> (Result);
   userTokens: (opt principal) -> (vec nat32) query;
 };
service : () -> Bag
